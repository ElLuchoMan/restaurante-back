basePath: /restaurante/v1
definitions:
  models.ApiResponse:
    properties:
      cause:
        type: string
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  models.Cliente:
    properties:
      APELLIDO:
        type: string
      DIRECCION:
        type: string
      NOMBRE:
        type: string
      OBSERVACIONES:
        type: string
      PASSWORD:
        type: string
      PK_DOCUMENTO_CLIENTE:
        type: integer
      TELEFONO:
        type: string
    type: object
  models.Domicilio:
    properties:
      DIRECCION:
        type: string
      ENTREGADO:
        type: boolean
      ESTADO_PAGO:
        type: string
      FECHA:
        type: string
      OBSERVACIONES:
        type: string
      PK_ID_DOMICILIO:
        type: integer
      TELEFONO:
        type: string
    type: object
  models.LoginRequest:
    properties:
      documento:
        type: integer
      password:
        type: string
    type: object
  models.MetodoPago:
    properties:
      DETALLE:
        type: string
      PK_ID_METODO_PAGO:
        type: integer
      PK_ID_PAGO:
        type: integer
      TIPO:
        type: string
    type: object
  models.Nomina:
    properties:
      ESTADO:
        type: string
      FECHA:
        type: string
      MONTO:
        type: integer
      PK_ID_NOMINA:
        type: integer
    type: object
  models.Pago:
    properties:
      ESTADO_PAGO:
        type: string
      FECHA:
        type: string
      HORA:
        type: string
      MONTO:
        type: integer
      PK_ID_METODO_PAGO:
        type: integer
      PK_ID_PAGO:
        type: integer
      UPDATED_AT:
        type: string
      UPDATED_BY:
        type: string
    type: object
  models.Pedido:
    properties:
      UPDATED_AT:
        type: string
      UPDATED_BY:
        type: string
      delivery:
        type: boolean
      estado_PEDIDO:
        type: string
      fecha:
        type: string
      hora:
        type: string
      pk_ID_DOMICILIO:
        type: integer
      pk_ID_PAGO:
        type: integer
      pk_ID_PEDIDO:
        type: integer
      pk_ID_RESTAURANTE:
        type: integer
    type: object
  models.PedidoCliente:
    properties:
      PK_DOCUMENTO_CLIENTE:
        type: integer
      PK_ID_PEDIDO:
        type: integer
      PK_ID_PEDIDO_CLIENTE:
        type: integer
    type: object
  models.Producto:
    properties:
      CALORIAS:
        type: integer
      CANTIDAD:
        type: integer
      DESCRIPCION:
        type: string
      ESTADO_PRODUCTO:
        type: string
      IMAGEN:
        type: string
      NOMBRE:
        type: string
      PK_ID_PRODUCTO:
        type: integer
      PRECIO:
        type: integer
    type: object
  models.Reserva:
    properties:
      CREATED_AT:
        type: string
      CREATED_BY:
        type: string
      ESTADO_RESERVA:
        type: string
      FECHA:
        type: string
      HORA:
        type: string
      INDICACIONES:
        type: string
      PERSONAS:
        type: integer
      PK_ID_RESERVA:
        type: integer
      UPDATED_AT:
        type: string
      UPDATED_BY:
        type: string
    type: object
  models.Restaurante:
    properties:
      PK_ID_CAMBIO_HORARIO:
        type: integer
      PK_ID_RESERVA:
        description: 'TODO: ESTÁ AL REVÉS'
        type: integer
      dias_laborales:
        type: string
      hora_apertura:
        type: string
      nombre_restaurante:
        type: string
      pk_id_restaurante:
        type: integer
    type: object
  models.Trabajador:
    properties:
      APELLIDO:
        type: string
      FECHA_INGRESO:
        type: string
      FECHA_NACIMIENTO:
        type: string
      FECHA_RETIRO:
        type: string
      HORARIO:
        type: string
      NOMBRE:
        type: string
      NUEVO:
        type: boolean
      PASSWORD:
        type: string
      PK_DOCUMENTO_TRABAJADOR:
        type: integer
      PK_ID_RESTAURANTE:
        type: integer
      ROL:
        type: string
      SUELDO:
        type: integer
      TELEFONO:
        type: string
    type: object
info:
  contact:
    email: baluisto96@gmail.com
  description: API para gestionar el sistema de un restaurante para "El fogón de María"
  title: Restaurante API
  version: 2.0.0
paths:
  /clientes:
    delete:
      consumes:
      - application/json
      description: Elimina un cliente de la base de datos.
      parameters:
      - description: ID del Cliente
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cliente eliminado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Cliente no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un cliente
      tags:
      - clientes
    get:
      consumes:
      - application/json
      description: Devuelve todos los clientes registrados en la base de datos, con
        opción de retornar solo nombre completo y teléfono.
      parameters:
      - description: Cantidad de resultados por página (por defecto es 10)
        in: query
        name: limit
        type: integer
      - description: Número de registros a omitir desde el inicio (por defecto es
          0)
        in: query
        name: offset
        type: integer
      - description: 'Especifica los campos a incluir en la respuesta (opciones: ''nombre_completo_telefono'')'
        in: query
        name: fields
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Lista de clientes con los campos especificados
          schema:
            items:
              type: object
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los clientes con opción de filtrar campos
      tags:
      - clientes
    post:
      consumes:
      - application/json
      description: Crea un nuevo cliente en la base de datos.
      parameters:
      - description: Datos del cliente a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Cliente'
      produces:
      - application/json
      responses:
        "201":
          description: Cliente creado
          schema:
            $ref: '#/definitions/models.Cliente'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo cliente
      tags:
      - clientes
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un cliente existente.
      parameters:
      - description: ID del Cliente
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del cliente a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Cliente'
      produces:
      - application/json
      responses:
        "200":
          description: Cliente actualizado
          schema:
            $ref: '#/definitions/models.Cliente'
        "404":
          description: Cliente no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un cliente
      tags:
      - clientes
  /clientes/search:
    get:
      consumes:
      - application/json
      description: Devuelve un cliente específico por ID utilizando query parameters.
      parameters:
      - description: ID del Cliente
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Cliente encontrado
          schema:
            $ref: '#/definitions/models.Cliente'
        "404":
          description: Cliente no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener cliente por ID
      tags:
      - clientes
  /domicilios:
    delete:
      consumes:
      - application/json
      description: Elimina un domicilio de la base de datos.
      parameters:
      - description: ID del Domicilio
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Domicilio eliminado
        "404":
          description: Domicilio no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un domicilio
      tags:
      - domicilios
    get:
      consumes:
      - application/json
      description: Devuelve todos los domicilios registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de domicilios
          schema:
            items:
              $ref: '#/definitions/models.Domicilio'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los domicilios
      tags:
      - domicilios
    post:
      consumes:
      - application/json
      description: Crea un nuevo domicilio en la base de datos.
      parameters:
      - description: Datos del domicilio a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Domicilio'
      produces:
      - application/json
      responses:
        "201":
          description: Domicilio creado
          schema:
            $ref: '#/definitions/models.Domicilio'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo domicilio
      tags:
      - domicilios
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un domicilio existente.
      parameters:
      - description: ID del Domicilio
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del domicilio a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Domicilio'
      produces:
      - application/json
      responses:
        "200":
          description: Domicilio actualizado
          schema:
            $ref: '#/definitions/models.Domicilio'
        "404":
          description: Domicilio no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un domicilio
      tags:
      - domicilios
  /domicilios/search:
    get:
      consumes:
      - application/json
      description: Devuelve un domicilio específico por ID utilizando query parameters.
      parameters:
      - description: ID del Domicilio
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Domicilio encontrado
          schema:
            $ref: '#/definitions/models.Domicilio'
        "404":
          description: Domicilio no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener domicilio por ID
      tags:
      - domicilios
  /login:
    post:
      consumes:
      - application/json
      description: Permite iniciar sesión utilizando el documento y la contraseña,
        devuelve un JWT con el rol.
      parameters:
      - description: Documento y Contraseña
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Inicio de sesión exitoso con token JWT
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "400":
          description: Solicitud incorrecta
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "401":
          description: Credenciales inválidas
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Iniciar sesión para clientes o trabajadores
      tags:
      - login
  /metodos_pago:
    delete:
      consumes:
      - application/json
      description: Elimina un método de pago de la base de datos.
      parameters:
      - description: ID del Método de Pago
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Método de pago eliminado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Método de pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un método de pago
      tags:
      - metodos_pago
    get:
      consumes:
      - application/json
      description: Devuelve todos los métodos de pago registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de métodos de pago
          schema:
            items:
              $ref: '#/definitions/models.MetodoPago'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los métodos de pago
      tags:
      - metodos_pago
    post:
      consumes:
      - application/json
      description: Crea un nuevo método de pago en la base de datos.
      parameters:
      - description: Datos del método de pago a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MetodoPago'
      produces:
      - application/json
      responses:
        "201":
          description: Método de pago creado
          schema:
            $ref: '#/definitions/models.MetodoPago'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo método de pago
      tags:
      - metodos_pago
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un método de pago existente.
      parameters:
      - description: ID del Método de Pago
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del método de pago a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.MetodoPago'
      produces:
      - application/json
      responses:
        "200":
          description: Método de pago actualizado
          schema:
            $ref: '#/definitions/models.MetodoPago'
        "404":
          description: Método de pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un método de pago
      tags:
      - metodos_pago
  /metodos_pago/search:
    get:
      consumes:
      - application/json
      description: Devuelve un método de pago específico por ID utilizando query parameters.
      parameters:
      - description: ID del Método de Pago
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Método de pago encontrado
          schema:
            $ref: '#/definitions/models.MetodoPago'
        "404":
          description: Método de pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener método de pago por ID
      tags:
      - metodos_pago
  /nominas:
    delete:
      consumes:
      - application/json
      description: Elimina una nómina de la base de datos.
      parameters:
      - description: ID de la Nómina
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Nómina eliminada
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Nómina no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar una nómina
      tags:
      - nominas
    get:
      consumes:
      - application/json
      description: Devuelve todas las nóminas registradas en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de nóminas
          schema:
            items:
              $ref: '#/definitions/models.Nomina'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todas las nóminas
      tags:
      - nominas
    post:
      consumes:
      - application/json
      description: Crea una nueva nómina en la base de datos.
      parameters:
      - description: Datos de la nómina a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Nomina'
      produces:
      - application/json
      responses:
        "201":
          description: Nómina creada
          schema:
            $ref: '#/definitions/models.Nomina'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear una nueva nómina
      tags:
      - nominas
    put:
      consumes:
      - application/json
      description: Actualiza los datos de una nómina existente.
      parameters:
      - description: ID de la Nómina
        in: query
        name: id
        required: true
        type: integer
      - description: Datos de la nómina a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Nomina'
      produces:
      - application/json
      responses:
        "200":
          description: Nómina actualizada
          schema:
            $ref: '#/definitions/models.Nomina'
        "404":
          description: Nómina no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar una nómina
      tags:
      - nominas
  /nominas/search:
    get:
      consumes:
      - application/json
      description: Devuelve una nómina específica por ID.
      parameters:
      - description: ID de la Nómina
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Nómina encontrada
          schema:
            $ref: '#/definitions/models.Nomina'
        "404":
          description: Nómina no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener nómina por ID
      tags:
      - nominas
  /pagos:
    delete:
      consumes:
      - application/json
      description: Elimina un pago de la base de datos.
      parameters:
      - description: ID del Pago
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pago eliminado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un pago
      tags:
      - pagos
    get:
      consumes:
      - application/json
      description: Devuelve todos los pagos registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de pagos
          schema:
            items:
              $ref: '#/definitions/models.Pago'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los pagos
      tags:
      - pagos
    post:
      consumes:
      - application/json
      description: Crea un nuevo pago en la base de datos.
      parameters:
      - description: Datos del pago a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Pago'
      produces:
      - application/json
      responses:
        "201":
          description: Pago creado
          schema:
            $ref: '#/definitions/models.Pago'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo pago
      tags:
      - pagos
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un pago existente.
      parameters:
      - description: ID del Pago
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del pago a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Pago'
      produces:
      - application/json
      responses:
        "200":
          description: Pago actualizado
          schema:
            $ref: '#/definitions/models.Pago'
        "404":
          description: Pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un pago
      tags:
      - pagos
  /pagos/search:
    get:
      consumes:
      - application/json
      description: Devuelve un pago específico por ID utilizando query parameters.
      parameters:
      - description: ID del Pago
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pago encontrado
          schema:
            $ref: '#/definitions/models.Pago'
        "404":
          description: Pago no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener pago por ID
      tags:
      - pagos
  /pedido_clientes:
    delete:
      consumes:
      - application/json
      description: Elimina una relación de la base de datos.
      parameters:
      - description: ID de la Relación
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Relación eliminada
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Relación no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar una relación pedido-cliente
      tags:
      - pedido_clientes
    get:
      consumes:
      - application/json
      description: Devuelve todas las relaciones entre pedidos y clientes.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de relaciones
          schema:
            items:
              $ref: '#/definitions/models.PedidoCliente'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todas las relaciones pedido-cliente
      tags:
      - pedido_clientes
    post:
      consumes:
      - application/json
      description: Crea una nueva relación entre un pedido y un cliente.
      parameters:
      - description: Datos de la relación a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.PedidoCliente'
      produces:
      - application/json
      responses:
        "201":
          description: Relación creada
          schema:
            $ref: '#/definitions/models.PedidoCliente'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear una nueva relación pedido-cliente
      tags:
      - pedido_clientes
    put:
      consumes:
      - application/json
      description: Actualiza los datos de una relación existente.
      parameters:
      - description: ID de la Relación
        in: query
        name: id
        required: true
        type: integer
      - description: Datos de la relación a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.PedidoCliente'
      produces:
      - application/json
      responses:
        "200":
          description: Relación actualizada
          schema:
            $ref: '#/definitions/models.PedidoCliente'
        "404":
          description: Relación no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar una relación pedido-cliente
      tags:
      - pedido_clientes
  /pedido_clientes/search:
    get:
      consumes:
      - application/json
      description: Devuelve una relación específica por ID.
      parameters:
      - description: ID de la Relación
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Relación encontrada
          schema:
            $ref: '#/definitions/models.PedidoCliente'
        "404":
          description: Relación no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener relación por ID
      tags:
      - pedido_clientes
  /pedidos:
    delete:
      consumes:
      - application/json
      description: Elimina un pedido de la base de datos.
      parameters:
      - description: ID del Pedido
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Pedido eliminado
        "404":
          description: Pedido no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un pedido
      tags:
      - pedidos
    get:
      consumes:
      - application/json
      description: Devuelve todos los pedidos registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de pedidos
          schema:
            items:
              $ref: '#/definitions/models.Pedido'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los pedidos
      tags:
      - pedidos
    post:
      consumes:
      - application/json
      description: Crea un nuevo pedido en la base de datos.
      parameters:
      - description: Datos del pedido a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Pedido'
      produces:
      - application/json
      responses:
        "201":
          description: Pedido creado
          schema:
            $ref: '#/definitions/models.Pedido'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo pedido
      tags:
      - pedidos
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un pedido existente.
      parameters:
      - description: ID del Pedido
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del pedido a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Pedido'
      produces:
      - application/json
      responses:
        "200":
          description: Pedido actualizado
          schema:
            $ref: '#/definitions/models.Pedido'
        "404":
          description: Pedido no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un pedido
      tags:
      - pedidos
  /pedidos/search:
    get:
      consumes:
      - application/json
      description: Devuelve un pedido específico por ID utilizando query parameters.
      parameters:
      - description: ID del Pedido
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Pedido encontrado
          schema:
            $ref: '#/definitions/models.Pedido'
        "404":
          description: Pedido no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener pedido por ID
      tags:
      - pedidos
  /productos:
    delete:
      consumes:
      - application/json
      description: Desactiva un producto en la base de datos (borrado lógico).
      parameters:
      - description: ID del Producto
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Producto desactivado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Producto no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Desactivar un producto
      tags:
      - productos
    get:
      consumes:
      - application/json
      description: Devuelve todos los productos registrados en la base de datos. Puedes
        incluir o excluir las imágenes con el parámetro `includeImage` y filtrar los
        productos activos con `onlyActive`.
      parameters:
      - description: Incluir imágenes Base64 en la respuesta (true o false, por defecto
          es false)
        in: query
        name: includeImage
        type: boolean
      - description: Filtrar solo productos disponibles (true o false, por defecto
          es false)
        in: query
        name: onlyActive
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Lista de productos
          schema:
            items:
              $ref: '#/definitions/models.Producto'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Obtener productos
      tags:
      - productos
    post:
      consumes:
      - multipart/form-data
      description: Crea un nuevo producto en la base de datos, incluyendo una imagen
        en formato Base64.
      parameters:
      - description: Nombre del producto
        in: formData
        name: NOMBRE
        required: true
        type: string
      - description: Calorías del producto
        in: formData
        name: CALORIAS
        type: integer
      - description: Descripción del producto
        in: formData
        name: DESCRIPCION
        type: string
      - description: Estado del producto
        in: formData
        name: ESTADO_PRODUCTO
        required: true
        type: string
      - description: Precio del producto
        in: formData
        name: PRECIO
        required: true
        type: integer
      - description: Imagen del producto (opcional)
        in: formData
        name: IMAGEN
        type: file
      - description: Cantidad del producto
        in: formData
        name: CANTIDAD
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Producto creado
          schema:
            $ref: '#/definitions/models.Producto'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Crear un nuevo producto
      tags:
      - productos
    put:
      consumes:
      - multipart/form-data
      description: Actualiza los datos de un producto existente, incluyendo una imagen
        en formato Base64.
      parameters:
      - description: ID del Producto
        in: query
        name: id
        required: true
        type: integer
      - description: Nombre del producto
        in: formData
        name: NOMBRE
        required: true
        type: string
      - description: Calorías del producto
        in: formData
        name: CALORIAS
        type: integer
      - description: Descripción del producto
        in: formData
        name: DESCRIPCION
        type: string
      - description: Estado del producto
        in: formData
        name: ESTADO_PRODUCTO
        required: true
        type: string
      - description: Precio del producto
        in: formData
        name: PRECIO
        required: true
        type: integer
      - description: Imagen del producto (opcional)
        in: formData
        name: IMAGEN
        type: file
      - description: Cantidad del producto
        in: formData
        name: CANTIDAD
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Producto actualizado
          schema:
            $ref: '#/definitions/models.Producto'
        "404":
          description: Producto no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Actualizar un producto
      tags:
      - productos
  /productos/search:
    get:
      consumes:
      - application/json
      description: Devuelve un producto específico por ID, incluyendo la imagen en
        formato Base64.
      parameters:
      - description: ID del Producto
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Producto encontrado
          schema:
            $ref: '#/definitions/models.Producto'
        "404":
          description: Producto no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Obtener producto por ID
      tags:
      - productos
  /reservas:
    delete:
      consumes:
      - application/json
      description: Actualiza el estado de una reserva a "CANCELADA".
      parameters:
      - description: ID de la Reserva
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reserva cancelada
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Reserva no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Cancelar una reserva
      tags:
      - reservas
    get:
      consumes:
      - application/json
      description: Devuelve todas las reservas registradas en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de reservas
          schema:
            items:
              $ref: '#/definitions/models.Reserva'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Obtener todas las reservas
      tags:
      - reservas
    post:
      consumes:
      - application/json
      description: Crea una nueva reserva en la base de datos.
      parameters:
      - description: Datos de la reserva a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Reserva'
      produces:
      - application/json
      responses:
        "201":
          description: Reserva creada
          schema:
            $ref: '#/definitions/models.Reserva'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Crear una nueva reserva
      tags:
      - reservas
    put:
      consumes:
      - application/json
      description: Actualiza los datos de una reserva existente.
      parameters:
      - description: ID de la Reserva
        in: query
        name: id
        required: true
        type: integer
      - description: Datos de la reserva a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Reserva'
      produces:
      - application/json
      responses:
        "200":
          description: Reserva actualizada
          schema:
            $ref: '#/definitions/models.Reserva'
        "404":
          description: Reserva no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Actualizar una reserva
      tags:
      - reservas
  /reservas/search:
    get:
      consumes:
      - application/json
      description: Devuelve una reserva específica por ID utilizando query parameters.
      parameters:
      - description: ID de la Reserva
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reserva encontrada
          schema:
            $ref: '#/definitions/models.Reserva'
        "404":
          description: Reserva no encontrada
          schema:
            $ref: '#/definitions/models.ApiResponse'
      summary: Obtener reserva por ID
      tags:
      - reservas
  /restaurantes:
    delete:
      consumes:
      - application/json
      description: Elimina un restaurante de la base de datos.
      parameters:
      - description: ID del Restaurante
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Restaurante eliminado
        "404":
          description: Restaurante no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un restaurante
      tags:
      - restaurantes
    get:
      consumes:
      - application/json
      description: Devuelve todos los restaurantes registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de restaurantes
          schema:
            items:
              $ref: '#/definitions/models.Restaurante'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los restaurantes
      tags:
      - restaurantes
    post:
      consumes:
      - application/json
      description: Crea un nuevo restaurante en la base de datos.
      parameters:
      - description: Datos del restaurante a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Restaurante'
      produces:
      - application/json
      responses:
        "201":
          description: Restaurante creado
          schema:
            $ref: '#/definitions/models.Restaurante'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo restaurante
      tags:
      - restaurantes
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un restaurante existente.
      parameters:
      - description: ID del Restaurante
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del restaurante a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Restaurante'
      produces:
      - application/json
      responses:
        "200":
          description: Restaurante actualizado
          schema:
            $ref: '#/definitions/models.Restaurante'
        "404":
          description: Restaurante no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un restaurante
      tags:
      - restaurantes
  /restaurantes/search:
    get:
      consumes:
      - application/json
      description: Devuelve un restaurante específico por ID utilizando query parameters.
      parameters:
      - description: ID del Restaurante
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Restaurante encontrado
          schema:
            $ref: '#/definitions/models.Restaurante'
        "404":
          description: Restaurante no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener restaurante por ID
      tags:
      - restaurantes
  /trabajadores:
    delete:
      consumes:
      - application/json
      description: Elimina un trabajador de la base de datos.
      parameters:
      - description: ID del Trabajador
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trabajador eliminado
          schema:
            $ref: '#/definitions/models.ApiResponse'
        "404":
          description: Trabajador no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Eliminar un trabajador
      tags:
      - trabajadores
    get:
      consumes:
      - application/json
      description: Devuelve todos los trabajadores registrados en la base de datos.
      produces:
      - application/json
      responses:
        "200":
          description: Lista de trabajadores
          schema:
            items:
              $ref: '#/definitions/models.Trabajador'
            type: array
        "500":
          description: Error en la base de datos
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener todos los trabajadores
      tags:
      - trabajadores
    post:
      consumes:
      - application/json
      description: Crea un nuevo trabajador en la base de datos.
      parameters:
      - description: Datos del trabajador a crear
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Trabajador'
      produces:
      - application/json
      responses:
        "201":
          description: Trabajador creado
          schema:
            $ref: '#/definitions/models.Trabajador'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Crear un nuevo trabajador
      tags:
      - trabajadores
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un trabajador existente.
      parameters:
      - description: ID del Trabajador
        in: query
        name: id
        required: true
        type: integer
      - description: Datos del trabajador a actualizar
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Trabajador'
      produces:
      - application/json
      responses:
        "200":
          description: Trabajador actualizado
          schema:
            $ref: '#/definitions/models.Trabajador'
        "404":
          description: Trabajador no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Actualizar un trabajador
      tags:
      - trabajadores
  /trabajadores/search:
    get:
      consumes:
      - application/json
      description: Devuelve un trabajador específico por ID utilizando query parameters.
      parameters:
      - description: ID del Trabajador
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Trabajador encontrado
          schema:
            $ref: '#/definitions/models.Trabajador'
        "404":
          description: Trabajador no encontrado
          schema:
            $ref: '#/definitions/models.ApiResponse'
      security:
      - BearerAuth: []
      summary: Obtener trabajador por ID
      tags:
      - trabajadores
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
